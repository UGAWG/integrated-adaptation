
root_project 'axie-swept'
refine_directory "~/refine/parmetis/src/"

# number of grids to adapt before increasing size
steps_per_complexity = 10
# complexity is about half the number of vertices in the adapted grid
complexity = 50e3*2**(iteration/steps_per_complexity)
rad_nl["adapt_complexity"] = complexity

# parameters for the pbs queue
queue_node_limit  = 25
cores_per_node    = 16
# strong scaling target of verticies per core
vertices_per_core = 10000
vertex_estimate   = 2*complexity.to_i
cores_desired = vertex_estimate/vertices_per_core
nodes_desired = (cores_desired/cores_per_node.to_f).ceil # round up
nodes_requested = [nodes_desired,queue_node_limit].min
number_of_processors cores_per_node*nodes_requested

# use pbswarp distributed with FUN3D to launch pbs jobs
mpirun_command "pbswrap -cpn #{cores_per_node} -t 12 -q K3-route -b -e '. ~/.profile'"

# first and last grid where project is root_projectIT, IT is iteration number
first_iteration  1
last_iteration  60

def iteration_steps
  if ( 1 == iteration ) then
    sh("cp #{project}.meshb Flow")
    sh("ref_translate Flow/#{project}.meshb Flow/#{project}.b8.ugrid")
  end
  sh("cp #{project(1)}.mapbc Flow/#{project}.mapbc")
  if ( 1 == iteration ) then
    flo()
  else
    flo({"import_from" => "'#{project}-restart.solb'"})
  end
  expect_file("Flow/#{project}_volume.solb")
  sh("cp Flow/pressure_signatures.dat Flow/#{project}_pressure_signatures.dat") if File.exist?("Flow/pressure_signatures.dat")
  ref("ref_interp_test --mach "+
      "#{project}.meshb #{project}_volume.solb #{project}-mach.solb")
  ref("ref_metric_test --lp "+
      "#{project}.meshb #{project}-mach.solb "+
      "2 -1.0 #{rad_nl["adapt_complexity"]} "+
      "#{project}-metric.solb")
  ref("ref_driver -i #{project}.meshb -m #{project}-metric.solb "+
      "-g ../#{root_project}.egads "+
      "-x #{project(@iteration+1)}.meshb "+
      "-x #{project(@iteration+1)}.b8.ugrid",
      "refine_out")
  ref("ref_interp_test --field #{project}.meshb #{project}_volume.solb "+
      "#{project(@iteration+1)}.meshb #{project(@iteration+1)}-restart.solb")
  if (0 != (@iteration % 5)) then
    %w[ .b8.ugrid -distance.solb .flow .grid_info -mach.solb .mapbc .meshb -metric.solb -restart.solb _volume.solb].each do |suffix| 
      sh("rm -f Flow/#{project}#{suffix}")
    end
  end
end
