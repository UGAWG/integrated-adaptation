
root_project 'delta'

steps_per_complexity = 5
complexity = 6.25e3*2**(iteration/steps_per_complexity)
rad_nl["adapt_complexity"] = complexity

# parameters for the pbs queue
queue_node_limit  = 25
cores_per_node    = 16
# strong scaling target of verticies per core
vertices_per_core = 10000
vertex_estimate   = 2*complexity.to_i
cores_desired = vertex_estimate/vertices_per_core
nodes_desired = (cores_desired/cores_per_node.to_f).ceil # round up
nodes_requested = [nodes_desired,queue_node_limit].min
number_of_processors cores_per_node*nodes_requested

# use pbswarp distributed with FUN3D to launch pbs jobs
mpirun_command "pbswrap -cpn #{cores_per_node} -t 12 -q K3-route -b -e '. ~/.profile'"

first_iteration 1
last_iteration 60

def iteration_steps
  def sh(comm)
    puts comm
    system(comm)
  end
  sh("cp #{project(1)}.meshb Flow")
  sh("cp #{project(1)}.mapbc Flow/#{project}.mapbc")
  sh("ref_translate Flow/#{project}.meshb Flow/#{project}.b8.ugrid")
  if ( 1 == iteration ) then
    flo()
  else
    flo({"import_from" => "'#{project}-restart.solb'"})
  end
  sh("(cd Flow && ~/refine/strict/src/ref_interp_test --mach #{project}.meshb #{project}_volume.solb #{project}-mach.solb  )")
  sh("(cd Flow && ~/refine/strict/src/ref_metric_test --lp #{project}.meshb #{project}-mach.solb 4 5.0 #{rad_nl["adapt_complexity"]} #{project}-metric.solb --kexact )")
  if ( iteration > 1 ) then
    sh("(cd Flow && #{mpirun_command} -np #{number_of_processors} ~/refine/zoltan/src/ref_driver -i #{project}.meshb -m #{project}-metric.solb -o #{project(@iteration+1)} < /dev/null | tee refine_out > #{project}_refine_out)")
  else
    sh("(cd Flow && ~/refine/strict/src/ref_driver -i #{project}.meshb -m #{project}-metric.solb -o #{project(@iteration+1)} < /dev/null | tee refine_out > #{project}_refine_out)")
  end
  sh("(cd Flow && ~/refine/strict/src/ref_interp_test --field #{project}.meshb #{project}_volume.solb #{project(@iteration+1)}.meshb #{project(@iteration+1)}-restart.solb  )")
end
