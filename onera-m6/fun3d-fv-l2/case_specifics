
root_project 'onera'

steps_per_complexity = 3
complexity = 50.0e3*2**(iteration/steps_per_complexity)
rad_nl["adapt_complexity"] = complexity

cpn=16
nodes = [[1,complexity.to_i/80000].max,25].min
number_of_processors cpn*nodes

mpirun_command "pbswrap -cpn #{cpn} -t 12 -q K3-route -b -e '. ~/.bashrc'"


first_iteration 1
last_iteration 50

def iteration_steps
  def sh(comm)
    puts comm
    system(comm)
  end
  sh("cp #{project(1)}.meshb Flow")
  sh("cp #{project(1)}.mapbc Flow/#{project}.mapbc")
  sh("ref_translate Flow/#{project}.meshb Flow/#{project}.b8.ugrid")
  sh("(cd Flow && ../wall-distance.sh #{project}.b8.ugrid)")
  flo({"distance_from_file" => "'#{project}.dist'"})
  sh("(cd Flow && ~/refine/egads/src/ref_metric_test --lp #{project}.meshb #{project}_volume.solb 2 1.5 #{rad_nl["adapt_complexity"]} #{project}-metric.solb )")
  if ( iteration > 1 ) then
    sh("(cd Flow && #{mpirun_command} -e '. ~/mod-mpich-gcc.sh' -np #{number_of_processors} ~/refine/zoltan/src/ref_driver -i #{project}.meshb -m #{project}-metric.solb -g ../#{project(1)}.egads -o #{project(@iteration+1)} < /dev/null | tee refine_out > #{project}_refine_out)")
  else
    sh("(cd Flow && #{mpirun_command} -e '. ~/mod-mpich-gcc.sh' -np #{1} ~/refine/zoltan/src/ref_driver -i #{project}.meshb -m #{project}-metric.solb -g ../#{project(1)}.egads -o #{project(@iteration+1)} < /dev/null | tee refine_out > #{project}_refine_out)")
  end
end
